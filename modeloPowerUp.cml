Domain PowerUp {
}

BoundedContext PowerUp implements PowerUp{
    Aggregate Usuario {
        Entity Usuario {
            aggregateRoot
            - Email usuarioEmail
            - AmizadeId amizadeId
            String nome
            String senha
            DateTime dataNascimento
            Repository UsuarioRepository {
                @Usuario obter(@Email usuarioEmail);
                void salvar(@Usuario usuario);
            }
        }
        ValueObject Email {
            String caracteres
        }
        ValueObject AmizadeId {
            int codigo
        }
    }
    Aggregate Perfil {
        Entity Perfil {
            aggregateRoot
            - PerfilId id
            - Email usuarioEmail
            - List<@PlanoTreino> planosTreinos
            - PlanoNutricional planoNutricional
            - List<@Conquista> conquistas
            - List<@Meta> metas
            - List<@Usuario> amigos
            boolean estado
            DateTime criacao
            String username
            String foto
            Repository PerfilRepository {
                void salvar(@Perfil perfil);
                boolean existsAmizade(@PerfilId perfilId1, @PerfilId perfilId2);
                Optional<@Perfil> findById(@PerfilId id);
            }
        }
        ValueObject PerfilId {
            int id
        }
    }
    Aggregate Frequencia {
        Entity Frequencia {
            aggregateRoot
            - FrequenciaId id
            - PerfilId perfil
            - TreinoId treino
            - PlanoTId planoTreino;
            DateTime dataDePresenca
            String foto
            Repository FrequenciaRepository {
                void salvar(@Frequencia frequencia);
                @Frequencia obterFrequencia(@FrequenciaId frequencia, DateTime atual);
            }
        }
        ValueObject FrequenciaId {
            int id
        }
        Service FrequenciaService {
            List<@Frequencia> listarFrequencias(@PerfilId perfil, @FrequenciaId frequencia);
            void registrarPresencaComFoto(@FrequenciaId frequenciaId, @PerfilId perfilId, @TreinoId treinoId, String fotoBase64);
            void registrarPresenca(@FrequenciaId frequenciaId, @PerfilId perfilId, @TreinoId treinoId);
        }
    }
    Aggregate Feedback {
        Entity Feedback {
            aggregateRoot
            - FeedbackId id
            - FrequenciaId frequencia
            - Classificacao classificacao
            - Email usuarioEmail
            String feedback
            Repository FeedbackRepository {
                void salvar(@Feedback feedback);
                void deletar(@FeedbackId id);
                List<@Feedback> listarFeedbacks(@FeedbackId feedback, @Email usuarioEmail);
                @Feedback obter(@FeedbackId id);
                void alterar(@FeedbackId id);
            }
        }
        ValueObject FeedbackId {
            int id
        }
        enum Classificacao {
            Cansado,
            ComDor,
            Bom,
            Excelente
        }
        Service FeedbackService {
            @Feedback adicionarFeedback(@FeedbackId id, @FrequenciaId frequencia, @Email emai, String descricao, @Classificacao classificacao);
        }
    }
    Aggregate Equipe {
        Entity Equipe {
            aggregateRoot
            - EquipeId id
            String nome
            String descricao
            String foto
            Date inicio
            Date fim
            int limiteMaximoMembros
            - Email usuarioAdm
            - List<@Email> usuariosEmails
            Repository EquipeRepository {
                void salvar(@Equipe equipe);
                List<@Equipe> listarEquipe(@EquipeId id, @PerfilId perfil);
            }
        }
        ValueObject EquipeId {
            int id
        }
        Service EquipeService {
            @Equipe criarEquipe(@EquipeId id, String nome, @Email usuarioAdm);
            void adicionarMembro(@EquipeId equipeId, @Email novoMembro);
            void removerMembro(@EquipeId equipeId, @Email membro);
            void atualizarInformacoes(@EquipeId equipeId, String nome, String descricao, String foto);
            void definirPeriodo(@EquipeId equipeId, Date inicio, Date fim);
            @Equipe obterEquipe(@EquipeId equipeId);
            List<@Equipe> listarEquipes(@EquipeId equipeId);
            boolean isLider(@EquipeId equipeId, @Email usuario);
            boolean isMembro(@EquipeId equipeId, @Email usuario);
        }
    }
    Aggregate PlanoNutricional {
        Entity PlanoNutricional {
            aggregateRoot
            - EstadoPlano estado
            - PlanoNId id
            - Objetivo objetivo
            - List<@RefeicaoId> refeicoes
            int caloriasTotais
            int caloriasObjetivo
            Repository PlanoNutricionalRepository {
                void salvar(@PlanoNutricional planoN);
                @PlanoNutricional obter(@PlanoNId plano);
            }
        }
        enum Objetivo {
            Cutting,
            Bulking
        }
        ValueObject PlanoNId {
            int id
        }
        Service PlanoNutricionalService {
            void modificarPlano (@PlanoNId plano, @Objetivo objetivo, int novasCaloriasObjetivo);
            int calcularCaloriasObjetivo (int caloriasTotais, @Objetivo objetivo);
        }
    }
    Aggregate Refeicao {
        Entity Refeicao {
            aggregateRoot
            - RefeicaoId id
            - TipoRefeicao tipoRefeicao
            - List<@AlimentoId> alimentos
            int caloriasTotais
            Date inicio
            Date fim
            Repository RefeicaoRepository {
                void salvar(@Refeicao refeicao);
                void editar(@RefeicaoId refeicao);
                void excluir(@RefeicaoId refeicao);
                @Refeicao obter(@RefeicaoId id);
                List<@Refeicao> listar(@Refeicao refeicao);
            }
        }
        enum TipoRefeicao {
            CafeDaManha,
            Lanche,
            Almoco,
            Jantar
        }
        ValueObject RefeicaoId {
            int id
        }
    }
    Aggregate Alimento {
        Entity Alimento {
            aggregateRoot
            - AlimentoId alimento
            - Categoria categoria
            String nome
            int calorias
            float quantidade
            Repository AlimentoRepository {
                void salvar(@Alimento alimento);
            }
        }
        enum Categoria {
            Gordura,
            Proteina,
            Carboidrato
        }
        ValueObject AlimentoId {
            int id
        }
    }
    Aggregate PlanoTreino {
        Entity PlanoTreino {
            aggregateRoot
            - PlanoTId id
            - Email usuarioEmail
            - EstadoPlano estado
            - List<@Treino> treinos
            - List<@Dias> dias
            String nome
            float recordeCarga;
            Repository PlanoTreinoRepository {
                void salvar(@PlanoTreino planoT);
                void excluir(@PlanoTId planoT);
                List<@PlanoTreino> listar(@PlanoTId planoT);
            }
        }
        enum EstadoPlano {
            Ativo,
            Historico
        }
        enum Dias {
            Segunda,
            Terca,
            Quarta,
            Quinta,
            Sexta,
            Sabado,
            Domingo
        }
        ValueObject PlanoTId {
            int id
        }
        Service PlanoTreinoService {
            @PlanoTreino criarPlanoTreino(@PlanoTId id, @Email usuarioEmail, String nome);
            void salvarPlanoTreino(@PlanoTreino plano);
            void adicionarTreino(@PlanoTId planoTId, @Treino treino);
            void removerTreino(@PlanoTId planoTId, @Treino treino);
            void adicionarDia(@PlanoTId planoTId, @Dias dia);
            void atualizarTreino(@PlanoTId planoTId, @Treino treinoAntigo, @Treino treinoNovo);
            void alterarEstadoPlano(@PlanoTId planoTId, @EstadoPlano estado);
            @PlanoTreino obterPlanoTreino(@PlanoTId planoTId);
            List<@PlanoTreino> listarPlanosTreino(@PlanoTId planoTId);
            void excluirPlanoTreino(@PlanoTId planoTId);
        }
    }
    Aggregate Treino {
        Entity Treino {
            aggregateRoot
            - TreinoId id
            - ExercicioId exercicio
            - TipoTreino tipo
            DateTime tempo
            float distancia
            int repeticoes
            float peso
            int serie
            Repository TreinoRepository {
                void salvar(@Treino treino);
                List<@TreinoId> listar(@TreinoId treino);
                void editar(@TreinoId treino);
                void excluir(@TreinoId treino);
            }
        }
        ValueObject TreinoId {
            int id
        }
        enum TipoTreino {
            Cardio,
            Peso
        }
    }
    Aggregate Exercicio {
        Entity Exercicio {
            aggregateRoot
            - ExercicioId id
            String nome
        }
        ValueObject ExercicioId {
            int id
        }
    }
    Aggregate Conquista {
        Entity Conquista {
            aggregateRoot
            - ConquistaId id
            - ExercicioId exercicio
            - TreinoId treino
            String descricao
            String nome
        }
        ValueObject ConquistaId {
            int id
        }
    }
    Aggregate Meta {
        Entity Meta {
            aggregateRoot
            - MetaId id
            - ExercicioId exercicio
            - TreinoId treino
            String nome
            Date fim
            Date inicio
        }
        ValueObject MetaId {
            int id
        }
    }
    Aggregate Duelo {
        Entity Duelo {
            aggregateRoot
            - DueloId id
            - AvatarId avatar1
            - AvatarId avatar2
            String resultado
            LocalDateTime dataDuelo
            Repository DueloRepository {
                void salvar(@Duelo duelo);
            }
        }
        ValueObject DueloId {
            int id
        }
        Service DueloService {
            @Duelo realizarDuelo(@PerfilId desafianteId, @PerfilId desafiadoId);
            void validarCooldownDuelo(@AvatarId avatarId1, @AvatarId avatarId2);
            void validarAmizade(@PerfilId desafianteId, @PerfilId desafiadoId);
            String calcularResultadoDuelo(@Avatar avatar1, @Avatar avatar2);
        }
    }
    Aggregate Avatar {
        Entity Avatar {
            aggregateRoot
            - AvatarId id
            - PerfilId perfil
            - List<@Acessorio> acessorios
            int nivel
            int experiencia
            int dinheiro
        }
        ValueObject AvatarId {
            int id
        }
        Service AvatarService {
            int forca(@PerfilId perfil);
            int resistencia(@PerfilId perfil);
            int agilidade(@PerfilId perfil);
        }
    }
    Aggregate Rivalidade {
        Entity Rivalidade {
            aggregateRoot
            - RivalidadeId id
            - PerfilId perfil1
            - PerfilId perfil2
            - ExercicioId exercicio
            - StatusRivalidade status
            DateTime inicio
            DateTime fim
        }
        ValueObject RivalidadeId {
            int id
        }
        enum StatusRivalidade {
            PENDENTE,
            ATIVA,
            RECUSADA,
            FINALIZADA,
            CANCELADA
        }
        Service RivalidadeService {
            @Rivalidade enviarConviteRivalidade(@PerfilId idPerfil1, @PerfilId idPerfil2, @ExercicioId exercicioId);
            @Rivalidade aceitarConvite(@RivalidadeId rivalidadeId, @PerfilId idUsuarioQueAceitou);
            @Rivalidade recusarConvite(@RivalidadeId rivalidadeId, @PerfilId idUsuarioQueRecusou);
            @Rivalidade finalizarRivalidade(@RivalidadeId rivalidadeId, @PerfilId idUsuarioQueFinalizou);
        }
    }
    Aggregate Loja {
        Entity Loja {
            aggregateRoot
            - LojaId id
            - List<@Acessorio> acessorios
        }
        ValueObject LojaId {
            int id
        }
    }
    Aggregate Acessorio {
        Entity Acessorio {
            aggregateRoot
            - AcessorioId id
            String icone
            int preco
            String nome
        }
        ValueObject AcessorioId {
            int id
        }
    }
}

